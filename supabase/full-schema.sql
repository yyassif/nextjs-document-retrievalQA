-- Custom enum types
create type public.user_assistant_enum as enum ('user', 'assistant');

-- Enable pgvector extension
create extension vector with schema extensions;

-- PDF Documents Chats
create table public.documents (
  id uuid not null default gen_random_uuid () primary key,
  document_name text not null,
  title text not null,
  content text,
  file_key text,
  metadata jsonb,
  embedding vector(1536),
  created_at timestamp with time zone not null default now()
);
comment on table public.documents is 'PDF Documents pertaining to a Document Chat.';

-- PDF Documents Messages
create table public.document_messages (
  id uuid not null default gen_random_uuid () primary key,
  body text,
  role user_assistant_enum default 'user'::public.user_assistant_enum,
  created_at timestamp with time zone not null default now(),
  document_id uuid references public.documents on delete cascade not null
);
comment on table public.document_messages is 'Messages content for each PDF Document.';

-- Chunks of document content and embeddings
create table public.document_chunks (
  id bigint generated by default as identity,
  content text not null,
  metadata jsonb,
  embedding vector(1536)
);
comment on table public.document_chunks is 'Document Content & Embeddings for each PDF Document.';

-- Create a function to search for documents
create or replace function public.match_documents(
  query_embedding vector(1536),
  match_count int default 5,
  filter jsonb DEFAULT '{}'
)
returns table (
  id bigint,
  content text,
  metadata jsonb,
  embedding jsonb,
  similarity float
) as $$
begin return query
  select
    document_chunks.id as id,
    document_chunks.content as content,
    document_chunks.metadata as metadata,
    (document_chunks.embedding::text)::jsonb as embedding,
    1 - (document_chunks.embedding <=> query_embedding) as similarity
  from document_chunks
  where document_chunks.metadata @> filter
  order by document_chunks.embedding <=> query_embedding
  limit match_count;
end;
$$ language plpgsql security definer;

-- Secure the tables by Enabling the Row Level Security
alter table public.documents enable row level security;
alter table public.document_messages enable row level security;
alter table public.document_chunks enable row level security;

-- Documents Policies
create policy "Allow public select access" on public.documents for select using ( true );
create policy "Allow public insert access" on public.documents for insert with check ( true );
create policy "Allow public update access" on public.documents for update using ( true );
create policy "Allow public delete access" on public.documents for delete using ( true );

-- Ducment Messages Policies
create policy "Allow public select access" on public.document_messages for select using ( true );
create policy "Allow public insert access" on public.document_messages for insert with check ( true );
create policy "Allow public delete access" on public.document_messages for delete using ( true );

-- Document Chunks Policies
create policy "Allow public select access" on public.document_chunks for select using ( true );
create policy "Allow public insert access" on public.document_chunks for insert with check ( true );

-- Send "Previous Data" on change as WebSocket Subscription
alter table public.documents replica identity full;
alter table public.document_messages replica identity full;
alter table public.document_chunks replica identity full;

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */

begin; 
  -- Remove the realtime publication
  drop publication if exists supabase_realtime; 

  -- Re-Create the publication but don't enable it for any tables
  create publication supabase_realtime;  
commit;

-- Add tables to the publication
alter publication supabase_realtime add table public.documents;
alter publication supabase_realtime add table public.document_messages;


-- Storge Buckets
insert into storage.buckets (id, name, file_size_limit, allowed_mime_types) values ( 'documents', 'documents', 52428800, ARRAY ['application/pdf'] );

-- Security Policies for Storage 
create policy "Allow public access to bukets" on "storage"."buckets" for all using ( true );
create policy "Allow public access to storage" on "storage"."objects" for all using ( true );
